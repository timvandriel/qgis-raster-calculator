# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LazyRasterCalculatorDockWidget
                                 A QGIS plugin
 A lazy evalutation raster calculator using raster-tools.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2025-05-01
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Tim Van Driel
        email                : timothy.vandriel@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsProject, QgsMapLayerType, QgsCoordinateReferenceSystem
from qgis.gui import QgsMessageBar, QgsProjectionSelectionDialog
from PyQt5.QtWidgets import QFileDialog, QMessageBox
from .backend import *
import traceback

FORM_CLASS, _ = uic.loadUiType(
    os.path.join(os.path.dirname(__file__), "lazy_raster_calculator_dockwidget_base.ui")
)


class LazyRasterCalculatorDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(LazyRasterCalculatorDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # check if layers were added or removed
        QgsProject.instance().layersAdded.connect(self.populate_raster_layer_list)
        QgsProject.instance().layerRemoved.connect(self.populate_raster_layer_list)

        # Connect double-click event to populate expression box
        self.rasterLayerListWidget.itemDoubleClicked.connect(
            self.handle_layer_double_click
        )

        # buttons for raster calculator
        self.plusButton.clicked.connect(lambda: self.insert_operator("+"))
        self.minusButton.clicked.connect(lambda: self.insert_operator("-"))
        self.multiplyButton.clicked.connect(lambda: self.insert_operator("*"))
        self.divideButton.clicked.connect(lambda: self.insert_operator("/"))
        self.openParenButton.clicked.connect(lambda: self.insert_operator("("))
        self.closeParenButton.clicked.connect(lambda: self.insert_operator(")"))
        self.clearButton.clicked.connect(self.clear_expression)

        # button for ouput path
        self.outputPathButton.clicked.connect(self.select_output_path)

        # crs button and combobox
        self.crsSelectButton.clicked.connect(self.open_crs_dialog)
        self.populate_crs_combobox()

        # okay and cancel buttons
        self.okButton.clicked.connect(self.on_ok_clicked)
        self.cancelButton.clicked.connect(self.on_cancel_clicked)

        # check for valid expression
        self.expressionBox.textChanged.connect(self.on_expression_changed)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def showEvent(self, event):
        super().showEvent(event)
        self.populate_raster_layer_list()

    def populate_raster_layer_list(self):
        """Populate the list widget with names of loaded raster layers."""
        self.rasterLayerListWidget.clear()
        for layer in QgsProject.instance().mapLayers().values():
            if layer.type() == QgsMapLayerType.RasterLayer:
                self.rasterLayerListWidget.addItem(layer.name())

    def handle_layer_double_click(self, item):
        """Handle double-click event on a layer name in the list widget.
        This method is called when the user double-clicks on a layer name in the list.
        It inserts the layer name into the expression box at the current cursor position.
        """
        layer_name = '"' + item.text() + '"'
        self.insert_text_into_text_edit(layer_name)

    def insert_operator(self, operator):
        """Insert an operator at the current cursor position in the expression box.
        This method is called when the user clicks on an operator button (e.g., +, -, *, /).
        """
        self.insert_text_into_text_edit(operator)

    def insert_layer_name(self, name):
        """Insert a layer name at the current cursor position in the expression box.
        This method is called when the user double-clicks on a layer name in the list.
        """
        self.insert_text_into_text_edit(name)

    def clear_expression(self):
        """Clear the expression box."""
        self.expressionBox.clear()

    def insert_text_into_text_edit(self, text):
        """Insert text at the current cursor position in the expression box."""
        cursor = self.expressionBox.textCursor()
        cursor.insertText(text)
        self.expressionBox.setTextCursor(cursor)
        self.expressionBox.setFocus()

    def update_expression_status(self, is_valid):
        """Update the status label based on the validity of the expression."""
        if is_valid:
            self.expressionStatusLabel.setText("Valid expression")
            self.expressionStatusLabel.setStyleSheet("color: green;")
        else:
            self.expressionStatusLabel.setText("Invalid expression")
            self.expressionStatusLabel.setStyleSheet("color: red;")

    def on_expression_changed(self):
        """Handle changes in the expression box."""
        text = self.expressionBox.toPlainText().strip()
        valid = ExpressionEvaluator.is_valid_expression(text)
        self.update_expression_status(valid)

    def open_crs_dialog(self):
        """Open the CRS selection dialog and set the selected CRS."""
        # Optionally set initial CRS, for example from your combo box or project CRS
        initial_crs = QgsCoordinateReferenceSystem(
            "EPSG:4326"
        )  # or get from current combo box selection

        dlg = QgsProjectionSelectionDialog(self)
        dlg.setCrs(initial_crs)
        if dlg.exec_() == 1:  # User pressed OK
            selected_crs = dlg.crs()
            # Now update your combo box or internal state with selected_crs
            self.crsComboBox.setCurrentText(selected_crs.authid())
            # Or store selected_crs for later use

    def populate_crs_combobox(self):
        """Populate the CRS combo box with available coordinate reference systems."""
        self.crsComboBox.clear()

        # Default CRS 4326
        default_crs = QgsCoordinateReferenceSystem("EPSG:4326")
        self.crsComboBox.addItem(
            f"{default_crs.authid()} - {default_crs.description()}",
            default_crs.authid(),
        )

        # Project CRS
        project_crs = QgsProject.instance().crs()
        self.crsComboBox.addItem(
            f"Project CRS - {project_crs.authid()} - {project_crs.description()}",
            project_crs.authid(),
        )

    def select_output_path(self):
        """Open a file dialog to select the output path for the raster."""
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_name, _ = QFileDialog.getSaveFileName(
            self,
            "Select Output Path",
            "",
            "GeoTIFF Files (*.tif);;All Files (*)",
            options=options,
        )
        if file_name:
            self.outputPathLineEdit.setText(file_name)

    def on_ok_clicked(self):
        expression = self.expressionBox.toPlainText().strip()
        output_path = self.outputPathLineEdit.text().strip()
        is_lazy = self.lazyRadioButton.isChecked()
        crs_authid = self.crsComboBox.currentData()

        if not expression or not output_path:
            QMessageBox.warning(
                self,
                "Missing Information",
                "Please enter both an expression and output path.",
            )
            return

        try:
            # Extract and validate layers
            print(f"ExpressionEvaluator: {ExpressionEvaluator}")
            print(f"type(ExpressionEvaluator): {type(ExpressionEvaluator)}")
            print(f"expression: {expression} (type: {type(expression)})")

            print("Calling extract_layer_names...")
            layer_names = ExpressionEvaluator.extract_layer_names(expression)
            print("Layer names extracted:", layer_names)

            layer_manager = LayerManager()
            missing_layers = layer_manager.validate_layer_names(layer_names)
            if missing_layers:
                raise LayerNotFoundError(
                    f"Missing raster layers: {', '.join(missing_layers)}"
                )

            # Prepare rasters
            raster_manager = RasterManager(layer_manager)

            raster_dict = raster_manager.get_rasters(layer_names)
            expression_evaluator = ExpressionEvaluator(raster_manager)
            result = expression_evaluator.evaluate(expression)

            if is_lazy:
                QMessageBox.information(
                    self,
                    "Lazy Evaluation",
                    f"Lazy evaluation complete. Result object created: {result}",
                )
                return

            # Save result immediately (eager evaluation)
            full_output_path = (
                output_path if output_path.endswith(".tif") else output_path + ".tif"
            )

            raster_saver = RasterSaver()
            raster_saver.save(result, full_output_path)

            QMessageBox.information(
                self,
                "Success",
                f"Raster saved to:\n{full_output_path}",
            )

        except InvalidExpressionError as e:
            QMessageBox.critical(self, "Invalid Expression", str(e))
        except LayerNotFoundError as e:
            QMessageBox.critical(self, "Missing Layers", str(e))
        except RasterToolsUnavailableError as e:
            QMessageBox.critical(self, "Raster Tools Error", str(e))
        except RasterSaveError as e:
            QMessageBox.critical(self, "Save Error", str(e))
        except Exception as e:
            tb = traceback.format_exc()
            QMessageBox.critical(
                self,
                "Unexpected Error",
                f"An unexpected error occurred:\n{str(e)}\n\nTraceback:\n{tb}",
            )

    def on_cancel_clicked(self):
        """Handle cancel button click event"""
        self.clear_expression()
        self.outputPathLineEdit.clear()
        self.crsComboBox.setCurrentIndex(0)
        self.lazyRadioButton.setChecked(True)
        self.populate_raster_layer_list()
        self.populate_crs_combobox()
        self.update_expression_status(False)
